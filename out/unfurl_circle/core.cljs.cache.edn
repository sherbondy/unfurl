;; Analyzed by ClojureScript 1.8.34
{:use-macros nil, :excludes #{}, :name unfurl-circle.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {setup {:protocol-inline nil, :meta {:file "/Users/ethan/code/unfurl-circle/src/unfurl_circle/core.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name unfurl-circle.core/setup, :variadic false, :file "src/unfurl_circle/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/Users/ethan/code/unfurl-circle/src/unfurl_circle/core.cljs", :line 17, :column 7, :end-line 17, :end-column 19, :arglists (quote ([state]))}, :name unfurl-circle.core/update-state, :variadic false, :file "src/unfurl_circle/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/Users/ethan/code/unfurl-circle/src/unfurl_circle/core.cljs", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([state]))}, :name unfurl-circle.core/draw-state, :variadic false, :file "src/unfurl_circle/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, unfurl-circle {:protocol-inline nil, :meta {:file "/Users/ethan/code/unfurl-circle/src/unfurl_circle/core.cljs", :line 76, :column 14, :end-line 76, :end-column 27, :export true, :arglists (quote ([]))}, :name unfurl-circle.core/unfurl-circle, :variadic false, :file "src/unfurl_circle/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:hsb :fn :update :t-norm :size :setup :middleware :host :host-id :no-start :draw :direction}, :order [:hsb :direction :t-norm :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}